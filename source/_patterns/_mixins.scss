@import 'variables';
@import 'breakpoints';

/* let's an element break out of its parent container and stretch to the full width */
@mixin fullwidth-element {
  width: 100%;
  position: relative;

  @include tablet-up {
    width: 100vw;
    left: 50%;
    right: 50%;
    margin-left: -50vw;
    margin-right: -50vw;
  }
}

/* padding for text elements in the article */
@mixin article-text-padding {
  padding: 0 24px;

  @include tablet-up {
    padding: 0 16px;
  }
}


/* reusable parts of text-lists */
@mixin text-list-defaults {
  margin: 12px 0 24px;
  list-style-type: none;
  counter-reset: item;

  @include article-text-padding;
  @include smartphone {
    margin: 8px 0 20px;
  }

  li {
    position: relative;
    margin: 12px 0;
    padding-left: 1.5em;

    @include smartphone {
      margin: 8px 0;
    }
  }
}

@mixin text-list-ordered-defaults {
  & > li {
    padding-left: 2em;

    &::before {
      position: absolute;
      left: 0;
      top: 0;
      font-family: $font-medium;
      content: counter(item) '.';
      color: $color-list-bullet;
      counter-increment: item;
    }
  }
}

@mixin text-list-unordered-defaults {
  & > li::before {
    position: absolute;
    left: 2px;
    top: 11px;
    display: inline-block;
    width: 6px;
    height: 6px;
    border-radius: 50%;
    background-color: $color-list-bullet;
    content: ' ';
  }
}

/*
 *
 * @mixin fullwidth-container
 *
 * This lets an element break out of its parent container and stretch it to the width of the wrapping card container
 *
 * This is just **plain simple negative margin magic**
 * It lets the element break out and size/move it to the borders of the card-container
 *
 *       @tablet = here we have to substract the spacing on the right and left from the viewport-width (100vw)
 *                 … therefore 100vw minus 100% (the width of the parent = content-container)
 *                 … diveded by 2 ('cause spacing is left and right) AND multiplied by -1 to get a negative number
 *      @desktop = same-same as tablet, but additional 32px of spacing
 * @desktop-wide = same-same as tablet, but parent is always 1200px
 *
 */

@mixin fullwidth-container {
  @include tablet {
    margin-right: calc(((100vw - 100%) / 2) * -1);
    margin-left:  calc(((100vw - 100%) / 2) * -1);
  }
  @include desktop {
    margin-right: calc((((100vw - 100%) / 2) - 32px) * -1);
    margin-left:  calc((((100vw - 100%) / 2) - 32px) * -1);
  }
  @include desktop-wide {
    margin-right: calc((1200px - 100%) / 2 * -1);
    margin-left:  calc((1200px - 100%) / 2 * -1);
  }
}

@mixin content-column-default {
  margin: 0 auto;

  @include tablet {
    max-width: 720px;
    padding: 0 32px;
  }

  @include desktop-up {
    padding: 0 40px;
    max-width: 792px;
  }
}

@mixin article-element-indentation {

  @include tablet {
    margin-left: auto;
    margin-right: auto;
    width: 476px;
  }

  @include desktop-up {
    margin-left: auto;
    margin-right: auto;
    width: 516px;
  }
}

@mixin text-link-defaults {
  border-bottom: 1px solid $color-link-default;

  &:hover {
    border-bottom: 1px solid $color-link-hover;
  }

  &:active {
    border-bottom: 1px solid $color-link-active;
  }
}

@mixin button-label {
  position: relative;
  display: block;
  @include fontSize(16);
  font-family: $font-regular;
  color: $color-text-default;
  background-color: $color-bg-box;
  margin: 0 0 2px;
  cursor: pointer;
  transition: background-color 0.2s ease-in-out;
  padding: 14px 16px 14px 48px;

  &:hover, &:active, &:focus {
    background-color: $color-bg-box-hover;
  }
}

@mixin font-smoothing {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

@mixin spinner($line-width: 1px, $dash-color: $color-srf-light, $bg-color: #dadad2, $parent-color: #4e4d47) {

  position: relative;
  height: 24px;
  width: 24px;
  animation: rotate360Animation 2s linear infinite;
  border: $line-width $dash-color solid;
  border-radius: 50%;

  /* NON-RETINA - spinner looks ugly with the grey half-circles, so hide them by painting them in the same color as the parent (see param) */
  &::before,
  &::after {
    content: '';
    position: absolute;
    box-sizing: border-box;

    animation: rotate360Animation 2s infinite ease;

    width: calc(50% + #{$line-width * 3});
    height: calc(100% + #{$line-width * 6});

    top: -#{$line-width * 3};

    border: #{$line-width * 3} solid $parent-color;
    background-color: $parent-color;
  }

  &::before {
    animation-delay: 1.5s;
    border-radius: 9999px 0 0 9999px;
    border-right: none;
    left: -#{$line-width * 3};
    transform-origin: 100% 50%;
  }

  &::after {
    border-radius: 0 9999px 9999px 0;
    border-left: none;
    left: 50%;
    transform-origin: 0 50%;
  }


  /* RETINA: show the grey half-circles */
  @media screen and (-webkit-min-device-pixel-ratio: 2 ), (min-resolution: 192dpi), (min-resolution: 2dppx), (-o-min-device-pixel-ratio: 20/10) {
    &::before,
    &::after {
      width: calc(50% + #{$line-width});
      height: calc(100% + #{$line-width * 2});
      top: -#{$line-width};
      border-width: #{$line-width};
      border-color: $bg-color;
      background-color: transparent;
    }

    &::before {
      left: -#{$line-width};
    }
  }
}

@mixin offscreen-non-focusable {
  position: absolute;
  width: 1px;
  height: 1px;
  margin: -1px;
  padding: 0;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  border: 0;
}

@mixin forceAspectRatio($ratio) {
  $padding: 100%;

  @if $ratio == '1:1' or $ratio == 'square' {
    $padding: 100%;
  } @else if $ratio == '16:9' or $ratio == 'widescreen' {
    $padding: 56.25%;
  } @else if $ratio == '2:1' {
    $padding: 50%;
  } @else if $ratio == '3:1' {
    $padding: 33.33%;
  }

  &::before {
    content: "";
    width: 1px;
    margin-left: -1px;
    float: left;
    height: 0;
    padding-top: $padding;
  }
}

@mixin breakLongWords {
  word-break: break-word;
  overflow-wrap: break-word;
  word-wrap: break-word;
}


@mixin momentumScrolling($vertical: true, $horizontal: false) {
  @include desktop-down {
    @if $vertical == true {
      overflow-y: scroll;
    }
    @if $horizontal == true {
      overflow-x: scroll;
    }
    -webkit-overflow-scrolling: touch;
  }
}

@mixin caret($color: 'white', $direction: 'down', $size: 'medium') {
  display: inline-block;
  width: 24px;
  height: 24px;
  background-position: center;
  background-repeat: no-repeat;
  transition: transform .2s ease-in-out;

  @if $color == 'red' {
    background-image: url(../img/icon/caret_red.svg);
  } @else if $color == 'grey' {
    background-image: url(../img/icon/caret_grey.svg);
  } @else {
    background-image: url(../img/icon/caret_white.svg);
  }

  @if $direction == 'up' {
    transform: rotate(180deg);
  } @else if $direction == 'left' {
    transform: rotate(90deg);
  } @else if $direction == 'right' {
    transform: rotate(-90deg);
  } @else {
    transform: rotate(0deg);
  }

  @if $size == 'large' {
    background-size: 100%;
  } @else if $size == 'small' {
    background-size: 53%;
  } @else if $size == 'tiny' {
    background-size: 38%;
  } @else {
    background-size: 70%;
  }
}

/* example: @include customPropWithFallback('color', '--teaser-color-info-updated', $color-text-light); */
@mixin customPropWithFallback($prop, $customprop, $fallback-value) {
  #{$prop}: #{$fallback-value};

  @supports (--srf: cool) {
    #{$prop}: var(#{$customprop}, #{$fallback-value});
  }
}

/*
 * TARGETED BROWSER: IE 11
 *
 * this mixin addresses the flexbug #7 issue: flex-basis doesn't account for box-sizing: border-box in IE11
 * workaround: instead of setting an explicit flex-basis value, use auto, and then set an explicit width or height.
 *
 * normally this mixin would go into _shame.scss but since it's also used in the critical css, it's placed here
 *
 * @see Flexbug #7 (https://github.com/philipwalton/flexbugs#flexbug-7)
 */

@mixin IESafeFlexBasis($width: 100%) {
  flex-basis: auto;
  width: $width;
}

@mixin fontSize($font-size) {
  font-size: $font-size + 0px;

  @if ($font-size > 24) {
    letter-spacing: normal;
  } @else if($font-size >= 20) {
    letter-spacing: 0.2px;
  } @else if($font-size >= 12) {
    letter-spacing: 0.4px;
  }
}

/**
 * Usage:
 *    @include columnCalculator(max-width, 4);
 *
 * results in
 *    @include smartphone {
 *      max-width: calc(4 * ((100% - 11 * 8px) / 12) + 3 * 8px);
 *    }
 * (and the other breakpoints as well)
 *
 */
@mixin columnCalculator($property, $nrOfColumns, $withGutter: false) {
  @include smartphone {
    #{property}: col($nrOfColumns, 8px, $withGutter);
  }

  @include tablet {
    #{property}: col($nrOfColumns, 24px, $withGutter);
  }

  @include desktop {
    #{property}: col($nrOfColumns, 24px, $withGutter);
  }

  @include desktop-widest {
    #{property}: col($nrOfColumns, 32px, $withGutter);
  }
}

@function col($nrOfColumns, $gutterSize, $withGutter: false) {
  @if ($withGutter) {
    @return calc(#{$nrOfColumns} * ((100% - 11 * #{$gutterSize}) / 12) + #{$nrOfColumns + 1} * #{$gutterSize});
  } @else {
    @return calc(#{$nrOfColumns} * ((100% - 11 * #{$gutterSize}) / 12) + #{$nrOfColumns - 1} * #{$gutterSize});
  }
}

/* Uses these Styles when the User has enabled «Reduced Motion» */
@mixin a11yAnimationFallback {
  @media screen and (prefers-reduced-motion: reduce) {
    @content;
  }
}

/* Uses these Styles when the User has made __no preference__ to «Reduced Motion» known */
@mixin a11yAnimation {
  @media screen and (prefers-reduced-motion: no-preference) {
    @content;
  }
}
