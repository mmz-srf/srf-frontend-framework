<script src="/assets/demo/js/toc.js"></script>
<article class="article demo-documentation">

    <header class="article-header">
        <p class="article-overline">Introduction</p>
        <h1 class="article-title">SRF Frontend Framework</h1>
        <p class="article-lead">
            1996 schrieb John Perry Barlow die «Unabhängigkeitserklärung des Cyberspace». Darin kritisierte der Poet und Aktivist erstaunlich früh die staatliche Kontrolle.
        </p>
    </header>

    <hr class="horizontal-separator" role="presentation" aria-hidden="true">

    <section class="article-content">

    <h2>Table of content</h2>
    <div class="js-demo-toc"></div>

    <hr class="horizontal-separator" role="presentation" aria-hidden="true">

        <p><strong>Please note:</strong> This page uses patterns of the SRF Frontend Framework but is no reference for its usage in general (there are also some specific styles only for this page in use).</p>

        <h2>CSS/Sass Development Guidelines</h2>

        <h3 class="demo-documentation__content-subtitle">General</h3>
        <ul class="text-list text-list--unordered">
            <li>Maintainability should be the primary goal when writing CSS/Sass-Code for the framework</li>
            <li>You are allowed to use flexbox  - so use it ;-)</li>
            <li>Top and bottom spaces between elements/components should be ruled by
                <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Model/Mastering_margin_collapsing" target="_blank">collapsing margins</a>. The element with the larger margin wins.
                Therefore only use margins not padding and add a wrapper <code>&lt;div&gt;</code> if necessary.</li>
        </ul>

        <h3 class="demo-documentation__content-subtitle">Formatting</h3>
        <ul class="text-list text-list--unordered">
            <li>Use soft tabs (2 spaces) for indentation</li>
            <li>Do not use ID selectors</li>
            <li>When using multiple selectors in a rule declaration, give each selector its own line.</li>
            <li>Put a space before the opening brace <code>{</code> in rule declarations</li>
            <li>In properties, put a space after, but not before, the <code>:</code> character.</li>
            <li>Put closing braces <code>}</code> of rule declarations on a new line</li>
            <li>Put blank lines between rule declarations</li>
            <li>Order your regular CSS and <code>@include</code> declarations logically (see below)</li>
            <li>Use the <code>.scss</code> syntax, never the original <code>.sass</code> syntax</li>
        </ul>

        <p><strong>Bad</strong></p>
        <div class="textbox textbox--article-indentation">
<pre ><code>.avatar{
    border-radius:50%;
    border:2px solid white; }
.no, .nope, .not_good {
    // ...
}
#lol-no {
  // ...
}
</code></pre>
        </div>
        <p><strong>Good</strong></p>
        <div class="textbox textbox--article-indentation">
<pre ><code>.avatar {
  border-radius: 50%;
  border: 2px solid white;
}

.one,
.selector,
.per-line {
  // ...
}
</code></pre>
        </div>

        <h3 class="demo-documentation__content-subtitle">Nesting selectors</h3>
        <p>Avoid the nesting of selectors in order to reduce <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity">specificity</a>; whenever possible, use class selectors.</p>
        <p>But in any case: <strong>Do not nest selectors more than three levels deep!</strong></p>
        <div class="textbox textbox--article-indentation">
<pre><code>.page-container {
  .content {
    .profile {
      // STOP!
    }
  }
}
</code></pre>
        </div>
        <p>When selectors become this long, you’re likely writing CSS that is:</p>
        <ul class="text-list text-list--unordered">
            <li>Strongly coupled to the HTML (fragile) <em>—OR—</em></li>
            <li>Overly specific (powerful) <em>—OR—</em></li>
            <li>Not reusable</li>
        </ul>

        <p>Please do not abbreviate and nest class names with the sass parent selector placeholder (<code>&</code>). Searching for CSS definitions gets very hard this way.</p>
        <p><strong>Bad</strong></p>
        <div class="textbox textbox--article-indentation">
<pre ><code>.sharing-bar {
  &__container { }
  &__button {
    &--facebook { }
    &:hover { }
  }
}
</code></pre>
        </div>
        <p><strong>Good</strong></p>
        <div class="textbox textbox--article-indentation">
<pre ><code>.sharing-bar { }
.sharing-bar__container { }
.sharing-bar__button {
  &:hover { }
}
.sharing-bar__button--facebook { }
</code></pre>
        </div>

        <h3 class="demo-documentation__content-subtitle">Ordering of property declarations</h3>
        <ol>
            <li>
                <p>Property declarations</p>
                <p>List all standard property declarations, anything that isn’t an <code>@include</code> or a nested selector.</p>
                <div class="textbox textbox--article-indentation">
<pre><code>.btn-green {
  background: green;
  font-weight: bold;
  // ...
}
</code></pre>
                </div>
            </li>
            <li>
                <p><code>@include</code> declarations</p>
                <p>Grouping <code>@include</code>s at the end makes it easier to read the entire selector.</p>
                <div class="textbox textbox--article-indentation">
<pre><code>.btn-green {
  background: green;
  font-weight: bold;
  @include transition(background 0.5s ease);
  // ...
}
</code></pre>
                </div>
            </li>
            <li>
                <p>Nested selectors</p>
                <p>Nested selectors, <em>if necessary</em>, go last, and nothing goes after them. Add whitespace between your rule declarations and nested selectors, as well as between adjacent nested selectors. Apply the same guidelines as above to your nested selectors.</p>
                <div class="textbox textbox--article-indentation">
<pre><code>.block-link {
  background: #ddd;
  font-weight: bold;
  @include transition(background 0.5s ease);

  &:hover {
    background: #fff;
  }
}
</code></pre>
                </div>
            </li>
        </ol>

        <h3 class="demo-documentation__content-subtitle">Comments</h3>
        <ul class="text-list text-list--unordered">
            <li>Prefer line comments (<code>//</code> in Sass-Files) to block comments.</li>
            <li>Prefer comments on their own line. Avoid end-of-line comments.</li>
            <li>Write detailed comments for code that isn’t self-documenting, i.e.:
                <ul>
                    <li>Uses of z-index</li>
                    <li>Compatibility or browser-specific hacks</li>
                </ul>
            </li>
        </ul>

        <h3 class="demo-documentation__content-subtitle">Class naming</h3>

        <ul class="text-list text-list--unordered">
            <li>In general, use BEM for naming classes where sensible. The block names should correspond to the pattern name in patternlab.</li>
            <li>For global and utility classes use the following prefixes<br>
                <div class="table-block">
                    <table>
                        <caption class="h-offscreen">prefixes for class names and their use cases</caption>
                        <thead>
                        <tr>
                            <th>Prefix</th>
                            <th>Use case</th>
                        </tr>
                        </thead>
                        <tbody>
                        <tr>
                            <td><code>l-</code></td>
                            <td>Classes defining the global layout</td>
                        </tr>
                        <tr>
                            <td><code>u-</code></td>
                            <td><a href="#utility_classes">Utility classes</a></td>
                        </tr>
                        <tr>
                            <td><code>js-</code></td>
                            <td><a href="#js_hooks">Javascript hooks</a></td>
                        </tr>
                        </tbody>
                    </table>
                </div>
            </li>
            <li>Class names beginning with <code>demo-</code> or <code>sg-</code> are <strong>not</strong> part of the SRF Frontend Framework patterns. They are only used to style this patternlab styleguide.</li>
        </ul>

        <p><strong>BEM</strong>, or “Block-Element-Modifier”, is a <em>naming convention</em> for classes in HTML and CSS. It was originally developed by Yandex with large codebases and scalability in mind, and can serve as a solid set of guidelines for implementing OOCSS.</p>
        <p>We use a variant of BEM called <a href="https://en.bem.info/methodology/naming-convention/#two-dashes-style">“Two Dashes style”</a></p>
        <p><strong>Example</strong></p>
        <div class="textbox textbox--article-indentation">
<pre ><code>// sharing-bar.twig
&lt;div class=&quot;sharing-bar&quot;&gt;
    &lt;div class=&quot;sharing-bar__container&quot;&gt;
        &lt;div class=&quot;sharing-bar__button sharing-bar__button--facebook&quot;&gt;
            &lt;span class=&quot;h-offscreen&quot;&gt;(externer Link, Popup)&lt;/span&gt;
        &lt;/div&gt;
        &lt;div class=&quot;sharing-bar__button sharing-bar__button--twitter&quot;&gt;
            &lt;span class=&quot;h-offscreen&quot;&gt;(externer Link, Popup)&lt;/span&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>
        </div>

        <div class="textbox textbox--article-indentation">
<pre ><code>/* sharing-bar.css */
.sharing-bar { }
.sharing-bar__container { }
.sharing-bar__button { }
.sharing-bar__button--facebook { }
</code></pre>
        </div>

        <ul class="text-list text-list--unordered">
            <li><code>.sharing-bar</code> is the “block” and represents the higher-level component</li>
            <li><code>.sharing-bar__container</code> and <code>.sharing-bar__button</code> are “elements” and represents descendants of <code>.sharing-bar</code> that helps compose the block as a whole. Elements can be nested in the html structure of the block.</li>
            <li><code>.sharing-bar__button--facebook</code> is a “modifier” and represents a different state or variation on the <code>.sharing-bar__button--facebook</code> block. Modifiers can be applied to elements and blocks</li>
        </ul>


        <div class="linkbox">
            <ul class="linkbox__list">
                <li>
                    <a href="https://en.bem.info" class="block-link block-link--external" target="_blank">
                        BEM
                    </a>
                </li>
                <li>
                    <a href="http://getbem.com" class="block-link block-link--external" target="_blank">
                        GetBEM
                    </a>
                </li>
                <li>
                    <a href="https://css-tricks.com/bem-101/" class="block-link block-link--external" target="_blank">
                        CSS Trick’s BEM 101
                    </a>
                </li>
                <li>
                    <a href="http://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/" class="block-link block-link--external" target="_blank">
                        Harry Roberts’ introduction to BEM
                    </a>
                </li>
            </ul>
        </div>

        <h3 class="demo-documentation__content-subtitle"><a id="utility_classes"></a>Utility classes</h3>
        <p>Use utility classes very restrictively since they might affect the maintainability of the code in a negative way. In order to stick to the DRY principle, use Sass-Mixins (we prefer maintainability over larger generated css code).</p>
        <div class="linkbox">
            <ul class="linkbox__list">
                <li>
                    <a href="http://davidtheclark.com/on-utility-classes/" class="block-link block-link--external" target="_blank">
                        On utility classes
                    </a>
                </li>
            </ul>
        </div>

        <h3 class="demo-documentation__content-subtitle"><a id="js_hooks"></a>JavaScript hooks</h3>
        <p>Avoid binding to the same class in both your CSS and JavaScript. Conflating the two often leads to, at a minimum, time wasted during refactoring when a developer must cross-reference each class they are changing, and at its worst, developers being afraid to make changes for fear of breaking functionality.</p>
        <p>Therefore, please create JavaScript-specific classes to bind to, prefixed with <code>.js-</code> and preferably followed by the block name if sensible.</p>
        <div class="textbox textbox--article-indentation">
<pre ><code>&lt;button class=&quot;js-sharing-bar-comment-counter sharing-bar__button sharing-bar__button--comment&quot;&gt;123&lt;/button&gt;</code></pre>
        </div>

        <h3 class="demo-documentation__content-subtitle">ID selectors</h3>
        <p>While it is possible to select elements by ID in CSS, it should generally be considered an anti-pattern. ID selectors introduce an unnecessarily high level of <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity">specificity</a> to your rule declarations, and they are not reusable.</p>

        <h3 class="demo-documentation__content-subtitle">!important declarations</h3>
        <blockquote class="blockquote ">
            <div class="blockquote__quote">
                <span class="blockquote__text">!important declarations should not be used unless they are absolutely necessary after all other avenues have been exhausted.</span>
            </div>
            <footer class="blockquote__footer">
                <cite class="blockquote__author">
                    <a href="https://www.smashingmagazine.com/2010/11/the-important-css-declaration-how-and-when-to-use-it/">Louis Lazaris</a><br>
                    <span class="blockquote__function">Web developer and author</span>
                </cite>
            </footer>
        </blockquote>

        <h3 class="demo-documentation__content-subtitle">Variables</h3>
        <p>Prefer dash-cased variable names (e.g. <code>$my-variable</code>) over camelCased or snake_cased variable names. It is acceptable to prefix variable names that are intended to be used only within the same file with an underscore (e.g. <code>$_my-variable</code>).</p>

        <h3 class="demo-documentation__content-subtitle">Mixins</h3>
        <p>Mixins should be used to DRY up your code, add clarity, or abstract complexity–in much the same way as well-named functions. Mixins that accept no arguments can be useful for this, but note that if you are not compressing your payload (e.g. gzip), this may contribute to unnecessary code duplication in the resulting styles.</p>

        <h3 class="demo-documentation__content-subtitle">Extend directive</h3>
        <p><code>@extend</code> should be avoided because it has unintuitive and potentially dangerous behavior, especially when used with nested selectors. Even extending top-level placeholder selectors can cause problems if the order of selectors ends up changing later (e.g. if they are in other files and the order the files are loaded shifts). Gzipping should handle most of the savings you would have gained by using <code>@extend</code>, and you can DRY up your stylesheets nicely with mixins.</p>

        <p>Again: <strong>never nest ID selectors!</strong></p>
        <p>If you must use an ID selector in the first place (and you should really try not to), they should never be nested. If you find yourself doing this, you need to revisit your markup, or figure out why such strong specificity is needed. If you are writing well formed HTML and CSS, you should <strong>never</strong> need to do this.</p>

        <h3 class="demo-documentation__content-subtitle">Credits</h3>
        <p>This style guide is based on the <a href="https://github.com/airbnb/css" target="_blank">Airbnb CSS / Sass Styleguide</a> with adaptations for the SRF Frontend Framework</p>

    </section>
</article>