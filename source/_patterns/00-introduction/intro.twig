<script src="/assets/demo/js/toc.js"></script>
<article class="article demo-documentation">

    <header class="article-header">
        <p class="article-overline">Introduction</p>
        <h1 class="article-title">SRF Frontend Framework</h1>
        <p class="article-lead">
            1996 schrieb John Perry Barlow die «Unabhängigkeitserklärung des Cyberspace». Darin kritisierte der Poet und Aktivist erstaunlich früh die staatliche Kontrolle.
        </p>
         <hr class="horizontal-separator horizontal-separator--content-max-width" role="presentation" aria-hidden="true">
    </header>

    <div class="js-demo-toc"></div>

    <hr class="horizontal-separator horizontal-separator--content-max-width" role="presentation" aria-hidden="true">

    <section class="article-content">

        <h2>Allgemeine Hinweise</h2>
        <h3>CSS</h3>
        <ul>
            <li>Alle CSS-Klassen, die mit "<code>demo-</code>" oder "<code>sg-</code>" beginnen, sind kein Bestandteil des SRF Frontend Frameworks, sondern gehören nur zur Darstellung dieses Pattenlab-Styleguides.</li>
            <li>Klassen, die das globale Layout betreffen, haben das Präfix "<code>l-</code>" (kleines L)</li>
            <li>Soweit sinnvoll werden Klassennamen nach dem BEM-Prinzip verwendet. Die BEM-Klassennamen (Block oder Element) sollten jeweils dem Patternnamen entsprechen.</li>
        </ul>


        <h2>CSS/SASS Guidelines</h2>

        <h3>Terminology</h3>

        <h4>Rule declaration</h4>
        <p>A “rule declaration” is the name given to a selector (or a group of selectors) with an accompanying group of properties. Here’s an example:</p>
        <div class="textbox textbox--article-indentation">
<pre ><code>.listing {
  font-size: 18px;
  line-height: 1.2;
}
</code></pre>
        </div>

        <h4>Selectors</h4>
        <p>In a rule declaration, “selectors” are the bits that determine which elements in the DOM tree will be styled by the defined properties. Selectors can match HTML elements, as well as an element’s class, ID, or any of its attributes. Here are some examples of selectors:</p>
        <div class="textbox textbox--article-indentation">
<pre ><code>.my-element-class {
  /* ... */
}
</code></pre>
        </div>


        <h4>Properties</h4>
        <p>Finally, properties are what give the selected elements of a rule declaration their style. Properties are key-value pairs, and a rule declaration can contain one or more property declarations. Property declarations look like this:</p>
        <div class="textbox textbox--article-indentation">
<pre ><code>/* some selector */ {
  background: #f1f1f1;
  color: #333;
}
</code></pre>
        </div>


        <h3>CSS</h3>

        <h4><a id="formatting"></a>Formatting</h4>
        <ul class="text-list text-list--unordered">
            <li>Use soft tabs (2 spaces) for indentation</li>
            <li>Do not use ID selectors</li>
            <li>When using multiple selectors in a rule declaration, give each selector its own line.</li>
            <li>Put a space before the opening brace <code>{</code> in rule declarations</li>
            <li>In properties, put a space after, but not before, the <code>:</code> character.</li>
            <li>Put closing braces <code>}</code> of rule declarations on a new line</li>
            <li>Put blank lines between rule declarations</li>
        </ul>

        <p><strong>Bad</strong></p>
        <div class="textbox textbox--article-indentation">
<pre ><code>.avatar{
    border-radius:50%;
    border:2px solid white; }
.no, .nope, .not_good {
    // ...
}
#lol-no {
  // ...
}
</code></pre>
        </div>
        <p><strong>Good</strong></p>
        <div class="textbox textbox--article-indentation">
<pre ><code>.avatar {
  border-radius: 50%;
  border: 2px solid white;
}

.one,
.selector,
.per-line {
  // ...
}
</code></pre>
        </div>

        <h4><a id="comments"></a>Comments</h4>
        <ul class="text-list text-list--unordered">
            <li>Prefer line comments (<code>//</code> in Sass-land) to block comments.</li>
            <li>Prefer comments on their own line. Avoid end-of-line comments.</li>
            <li>Write detailed comments for code that isn’t self-documenting, i.e.:
                <ul>
                    <li>Uses of z-index</li>
                    <li>Compatibility or browser-specific hacks</li>
                </ul>
            </li>
        </ul>

        <h4><a id="class_naming_convention"></a>Class naming convention</h4>
        <p><strong>BEM</strong>, or “Block-Element-Modifier”, is a <em>naming convention</em> for classes in HTML and CSS. It was originally developed by Yandex with large codebases and scalability in mind, and can serve as a solid set of guidelines for implementing OOCSS.</p>
        <ul class="text-list text-list--unordered">
            <li><a href="https://en.bem.info">BEM</a></li>
            <li><a href="http://getbem.com">GetBEM</a></li>
            <li>CSS Trick’s <a href="https://css-tricks.com/bem-101/">BEM 101</a></li>
            <li>Harry Roberts’ <a href="http://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/">introduction to BEM</a></li>
        </ul>
        <p>We use a variant of BEM called <a href="https://en.bem.info/methodology/naming-convention/#two-dashes-style">“Two Dashes style”</a></p>
        <p><strong>Example</strong></p>
        <div class="textbox textbox--article-indentation">
<pre ><code>// sharing-bar.twig
&lt;div class=&quot;sharing-bar&quot;&gt;
    &lt;div class=&quot;sharing-bar__container&quot;&gt;
        &lt;div class=&quot;sharing-bar__button sharing-bar__button--facebook&quot;&gt;
            &lt;span class=&quot;h-offscreen&quot;&gt;(externer Link, Popup)&lt;/span&gt;
        &lt;/div&gt;
        &lt;div class=&quot;sharing-bar__button sharing-bar__button--twitter&quot;&gt;
            &lt;span class=&quot;h-offscreen&quot;&gt;(externer Link, Popup)&lt;/span&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>
        </div>

        <div class="textbox textbox--article-indentation">
<pre ><code>/* ListingCard.css */
.sharing-bar { }
.sharing-bar__container { }
.sharing-bar__button { }
.sharing-bar__button--facebook { }
</code></pre>
        </div>

        <ul class="text-list text-list--unordered">
            <li><code>.sharing-bar</code> is the “block” and represents the higher-level component</li>
            <li><code>.sharing-bar__container</code> and <code>.sharing-bar__button</code> are “elements” and represents descendants of <code>.sharing-bar</code> that helps compose the block as a whole. Elements can be nested in the html structure of the block.</li>
            <li><code>.sharing-bar__button--facebook</code> is a “modifier” and represents a different state or variation on the <code>.sharing-bar__button--facebook</code> block. Modifiers can be applied to elements and blocks</li>
        </ul>


        <h4><a id="JavaScript_hooks_145"></a>JavaScript hooks</h4>
        <p>Avoid binding to the same class in both your CSS and JavaScript. Conflating the two often leads to, at a minimum, time wasted during refactoring when a developer must cross-reference each class they are changing, and at its worst, developers being afraid to make changes for fear of breaking functionality.</p>
        <p>Therefore, please create JavaScript-specific classes to bind to, prefixed with <code>.js-</code> and preferably followed by the block name if sensible.</p>
        <div class="textbox textbox--article-indentation">
<pre ><code>&lt;button class=&quot;js-sharing-bar-comment-counter sharing-bar__button sharing-bar__button--comment&quot;&gt;123&lt;/button&gt;</code></pre>
        </div>

        <h4>ID selectors</h4>
        <p>While it is possible to select elements by ID in CSS, it should generally be considered an anti-pattern. ID selectors introduce an unnecessarily high level of <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity">specificity</a> to your rule declarations, and they are not reusable.</p>

        <h3>Sass</h3>
        <h4>Syntax</h4>
        <ul class="text-list text-list--unordered">
            <li>Use the <code>.scss</code> syntax, never the original <code>.sass</code> syntax</li>
            <li>Order your regular CSS and <code>@include</code> declarations logically (see below)</li>
        </ul>

        <h4><a id="Ordering_of_property_declarations_166"></a>Ordering of property declarations</h4>
        <ol>
            <li>
                <p>Property declarations</p>
                <p>List all standard property declarations, anything that isn’t an <code>@include</code> or a nested selector.</p>
                <div class="textbox textbox--article-indentation">
<pre><code>.btn-green {
  background: green;
  font-weight: bold;
  // ...
}
</code></pre>
                </div>
            </li>
            <li>
                <p><code>@include</code> declarations</p>
                <p>Grouping <code>@include</code>s at the end makes it easier to read the entire selector.</p>
                <div class="textbox textbox--article-indentation">
<pre><code>.btn-green {
  background: green;
  font-weight: bold;
  @include transition(background 0.5s ease);
  // ...
}
</code></pre>
                </div>
            </li>
            <li>
                <p>Nested selectors</p>
                <p>Nested selectors, <em>if necessary</em>, go last, and nothing goes after them. Add whitespace between your rule declarations and nested selectors, as well as between adjacent nested selectors. Apply the same guidelines as above to your nested selectors.</p>
                <div class="textbox textbox--article-indentation">
<pre><code>.block-link {
  background: #ddd;
  font-weight: bold;
  @include transition(background 0.5s ease);
  &:hover {
    background: #fff;
  }
}
</code></pre>
                </div>
            </li>
        </ol>
        <h4><a id="Variables_209"></a>Variables</h4>
        <p>Prefer dash-cased variable names (e.g. <code>$my-variable</code>) over camelCased or snake_cased variable names. It is acceptable to prefix variable names that are intended to be used only within the same file with an underscore (e.g. <code>$_my-variable</code>).</p>
        <h4><a id="Mixins_213"></a>Mixins</h4>
        <p>Mixins should be used to DRY up your code, add clarity, or abstract complexity–in much the same way as well-named functions. Mixins that accept no arguments can be useful for this, but note that if you are not compressing your payload (e.g. gzip), this may contribute to unnecessary code duplication in the resulting styles.</p>
        <h4><a id="Extend_directive_217"></a>Extend directive</h4>
        <p><code>@extend</code> should be avoided because it has unintuitive and potentially dangerous behavior, especially when used with nested selectors. Even extending top-level placeholder selectors can cause problems if the order of selectors ends up changing later (e.g. if they are in other files and the order the files are loaded shifts). Gzipping should handle most of the savings you would have gained by using <code>@extend</code>, and you can DRY up your stylesheets nicely with mixins.</p>
        <h4><a id="Nested_selectors_221"></a>Nested selectors</h4>
        <p><strong>Do not nest selectors more than three levels deep!</strong></p>
        <div class="textbox textbox--article-indentation">
<pre><code>.page-container {
  .content {
    .profile {
      // STOP!
    }
  }
}
</code></pre>
        </div>
        <p>When selectors become this long, you’re likely writing CSS that is:</p>
        <ul class="text-list text-list--unordered">
            <li>Strongly coupled to the HTML (fragile) <em>—OR—</em></li>
            <li>Overly specific (powerful) <em>—OR—</em></li>
            <li>Not reusable</li>
        </ul>
        <p>Again: <strong>never nest ID selectors!</strong></p>
        <p>If you must use an ID selector in the first place (and you should really try not to), they should never be nested. If you find yourself doing this, you need to revisit your markup, or figure out why such strong specificity is needed. If you are writing well formed HTML and CSS, you should <strong>never</strong> need to do this.</p>
        <h3><a id="Sources_246"></a>Sources</h3>
        <p>This style guide is largely based on the <a href="https://github.com/airbnb/css">Airbnb CSS / Sass Styleguide</a> with some minor adaptations for SRF</p>

    </section>
</article>