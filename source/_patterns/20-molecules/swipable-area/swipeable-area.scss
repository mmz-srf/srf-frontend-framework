@import "../../mixins";
@import "../../variables";
@import "./swipeable-variables";

.swipeable-area {
  position: relative;
  overflow: hidden;

  @include desktop-up {
    margin: 0 -88px;
    
    &:hover {
      .swipeable-area__button-container:not(.swipeable-area__button-container--hidden) {
        opacity: 1;
        visibility: visible;
      }
    }
  }

  @include desktop-wide {
    margin: 0 -80px;
  }
}

.swipeable-area__wrapper {
  overflow-x: scroll;
  overflow-y: hidden;
  width: 100%;
  -webkit-overflow-scrolling: touch; // enable momentum scrolling on ios
  @include preventScrollbars();
  
  scroll-snap-type: mandatory; // fallback for old spec without dimension, see https://www.w3.org/TR/2015/WD-css-snappoints-1-20150326/
  scroll-snap-type: x mandatory;
  scroll-behavior: smooth;

  @include desktop-up {
    scroll-padding: 120px;
  }
}

.swipeable-area__item {
  scroll-snap-align: center;
  
  @include desktop-up {
    scroll-snap-align: start;
  }
}

.swipeable-area__mask {
  display: none;
  position: absolute;
  top: -1px;
  width: 120px;
  height: 100%;

  @include desktop-up {
    display: block;
  }
}

.swipeable-area__mask--left {
  left: 0;
  background: linear-gradient(to right, $color-srf-warmgrey-25, $color-srf-warmgrey-25a80);
}

.swipeable-area__mask--right {
  z-index: 0;
  right: 0;
  background: linear-gradient(to left, $color-srf-warmgrey-25, $color-srf-warmgrey-25a80);
}

.swipeable-area--themed {
  @supports (--srf: cool) {
    .swipeable-area__mask--left {
      background: linear-gradient(90deg, var(--branded-background-color-start) 0%, var(--branded-background-color-start-transparent) 100%);
    }

    .swipeable-area__mask--right {
      background: linear-gradient(90deg, var(--branded-background-color-end-transparent) 0%, var(--branded-background-color-end) 100%);
    }
  }
}

/**
 * The buttons are a bit more complicated than they could be. Reason:
 * The 2 buttons are directly adjacent but have a shadow each, yet the shadows
 * shouldn't be cast on each other, but rather be behind both buttons.
 * When one button is inactive, it gets transparent and the shadow from the
 * other button should be visible through it; its own shadow should disappear.
 *
 * This can only be solved by separating the button and the shadow:
 *
 * Both buttons active - "shared" shadow            One button active - only active button has shadow
 * 
 * +--------------------------------+               +--------------------------------+
 * |               ||               |XX             |               ||               |XX
 * |         XX    ||     XXX       |XXXX           |          XX   ||     XXX       |XXXX
 * |      XXXX     ||       XXX     +--+XX          |        X      ||       XXX     +--+XX
 * |     XXX       ||        XXX    |  |XX          |      XX       ||        XXX    |  |XX
 * |       XXX     ||     XXXX      |  |XX          |        X      ||     XXXX      |  |XX
 * |         XX    ||     XX        |  |XX          |          XX   ||     XX        |  |XX
 * |               ||               |  |XX          |               ||               |  |XX
 * +--------------------------------+  |XX          +--+-----------------------------+  |XX
 *  XX|               ||               |XX             |              XX|               |XX
 *  XX|               ||               |XX             |              XX|               |XX
 *  XX+--------------------------------+XX             +--------------XX----------------+XX
 *   XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX                              XXXXXXXXXXXXXXXXXXX
 *    XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX                                XXXXXXXXXXXXXXXXX
 *
 * Funny enough, the buttons "on top" still get a box-shadow when being hovered over.
 * This requires the usage of z-index, so that the hovered button is higher than its
 * neighbor.
 */
.swipeable-area__button-container {
  position: absolute;
  display: flex;
  visibility: hidden; // only visible when hovering over the area
  transform: translateY(-50%); // center button vertically
  opacity: 0; // fading the buttons in
  transition: opacity .2s ease-in-out;
  top: calc((100% - #{$bottom-gap-desktop}) / 2);
  right: #{$edge-gap-desktop - $next-teaser-visible-amount-desktop};

  @include desktop-wide {
    top: calc((100% - #{$bottom-gap-desktopwide}) / 2);
    right: #{$edge-gap-desktopwide - $next-teaser-visible-amount-desktopwide};
  }
}

.swipeable-area__button {
  display: none;
  position: absolute;
  opacity: 1;
  box-shadow: none;
  // opacity to switch between active/inactive; box-shadow for hover
  transition: opacity .2s ease-in-out, box-shadow .2s ease-in-out;
  background-color: $color-srf-neutral-white;
  cursor: pointer;
  border-radius: 2px;
  padding: 4px; // results in 32x32px
  
  @include desktop-wide {
    padding: 8px; // results in 40x40px
  }

  @include desktop-up {
    display: flex;
  }

  &:hover:not(.swipeable-area__button--inactive) {
    // override hover-style from icon-button
    opacity: 1;
    // and give it some shadow & lift the hovered buttong above its neighbor
    box-shadow: $shadow-elevation12;
    z-index: 1;
  }
}

.swipeable-area__button--left {
  border-top-right-radius: 0;
  border-bottom-right-radius: 0;
  left: -1px; // leave a small gap between the buttons
}

.swipeable-area__button--right {
  border-top-left-radius: 0;
  border-bottom-left-radius: 0;
  right: 0;
}

.swipeable-area__button--inactive {
  opacity: .4;
  cursor: default;

  // override hover-style from above
  &:hover {
    opacity: .4;
  }
}

.swipeable-area__button-shadow {
  box-shadow: $shadow-elevation6;
  transition: box-shadow .2s ease-in-out;
  // same sizes as the buttons above
  height: 32px;
  width: 32px;

  @include desktop-wide {
    height: 40px;
    width: 40px;
  }
}

.swipeable-area__button--left.swipeable-area__button--inactive ~ .swipeable-area__button-shadow--left {
  box-shadow: none;
}

.swipeable-area__button--right.swipeable-area__button--inactive ~ .swipeable-area__button-shadow--right {
  box-shadow: none;
}
